/**
 * 
 */
package net.paoding.rose.jade.plugin.sql;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.core.annotation.Order;
import org.springframework.dao.InvalidDataAccessApiUsageException;

import net.paoding.rose.jade.annotation.SQL;
import net.paoding.rose.jade.plugin.sql.dialect.IDialect;
import net.paoding.rose.jade.plugin.sql.mapper.EntityMapperManager;
import net.paoding.rose.jade.plugin.sql.mapper.IOperationMapper;
import net.paoding.rose.jade.plugin.sql.mapper.OperationMapperManager;
import net.paoding.rose.jade.plugin.sql.util.BasicSQLFormatter;
import net.paoding.rose.jade.statement.Interpreter;
import net.paoding.rose.jade.statement.StatementRuntime;

/**
 * Plum插件用于生成SQL的拦截器。
 * 
 * @author Alan.Geng[gengzhi718@gmail.com]
 */
@Order(-1)
public class PlumSQLInterpreter implements Interpreter, InitializingBean {

    private OperationMapperManager operationMapperManager;

    private IDialect dialect;

    private static final Log LOGGER = LogFactory.getLog(PlumSQLInterpreter.class);

    /* (non-Javadoc)
     * @see net.paoding.rose.jade.statement.Interpreter#interpret(net.paoding.rose.jade.statement.StatementRuntime)
     */
    @Override
    public void interpret(StatementRuntime runtime) {
        if (runtime.getMetaData().getMethod().getAnnotation(SQL.class) == null) {
            try {
                IOperationMapper operationMapper = operationMapperManager
                    .createGet(runtime.getMetaData());
                String sql = dialect.translate(operationMapper, runtime);

                if (LOGGER.isInfoEnabled()) {
                    BasicSQLFormatter formatter = new BasicSQLFormatter();
                    LOGGER.info("Plum auto generated by " + dialect.getClass().getSimpleName() + ":"
                                + formatter.format(sql));
                }
                runtime.setSQL(sql);
            } catch (Exception e) {
                throw new InvalidDataAccessApiUsageException(e.getMessage(), e);
            }
        }
    }

    public void setDialect(IDialect dialect) {
        this.dialect = dialect;
    }

    public void setOperationMapperManager(OperationMapperManager operationMapperManager) {
        this.operationMapperManager = operationMapperManager;
    }

	@Override
	public void afterPropertiesSet() throws Exception {
		if(operationMapperManager == null) {
			operationMapperManager = new OperationMapperManager();
			operationMapperManager.setEntityMapperManager(new EntityMapperManager());
		}
	}

}
